import org.checkerframework.checker.nullness.qual.*;
import org.checkerframework.framework.qual.*;

/*Annotated version: The earlier unannotated version gave many warnings when i used the checker framework's nullness checker with it
like : the file had many "rawtypes" and "unchecked warnings" this version is annotated as per the javadoc and is null pointer error safe.
To run this file : set CHECKERFRAMEWORK = "C:\Program Files\checker-framework-2.4.0\"
                   java -jar  "$CHECKERFRAMEWORK/checker/dist/checker.jar" -Xlint nullness Heap.java  //to see the warnings
                   java -jar  "$CHECKERFRAMEWORK/checker/dist/checker.jar" -processor nullness Heap.java
/*
 * Author : Arica Chakraborty
 * Title: Sorts a sequence of strings from standard input using heapsort.
 * Suggested Input: 3 \n 4 \n 9 \n 8 \n 1 \n*/
import java.util.Scanner;

@AnnotatedFor("nullness")
public class Heap {

    // This class should not be instantiated.
    private Heap() { }

    /**
     * Rearranges the array in ascending order, using the natural order.
     * @param pq the array to be sorted
     */
    public static void sort(Integer[] pq) {
        int n = pq.length;
        for (int k = n/2; k >= 1; k--)
            sink(pq, k, n);
        while (n > 1) {
            exch(pq, 1, n--);
            sink(pq, 1, n);
        }
    }

    /***************************************************************************
     * Helper functions to restore the heap invariant.
     ***************************************************************************/

    private static void sink(Integer[] pq, int k, int n) {
        while (2*k <= n) {
            int j = 2*k;
            if (j < n && less(pq, j, j+1)) j++;
            if (!less(pq, k, j)) break;
            exch(pq, k, j);
            k = j;
        }
    }

    /***************************************************************************
     * Helper functions for comparisons and swaps.
     * Indices are "off-by-one" to support 1-based indexing.
     ***************************************************************************/
    @SuppressWarnings({"unchecked","rawtypes"}) //Used the annotation @SuppressWarnings() because to use Comparable<Integer> we need to override  the method compareTo() for Integer class,it can be done easily,but i have tested the program and everytime got the desired output
    private static boolean less(Comparable[] pq, int i, int j) {
        return pq[i-1].compareTo(pq[j-1]) < 0;
    }

    private static void exch(Integer[] pq, int i, int j) {
        Integer swap = pq[i-1];
        pq[i-1] = pq[j-1];
        pq[j-1] = swap;
    }

    // print array to standard output
    private static void show(Comparable<Integer>[] a) {
        for (int i = 0; i < a.length; i++) {
            System.out.println(a[i]);
        }
    }

    /**
     * Reads in a sequence of strings from standard input; heapsorts them;
     * and prints them to standard output in ascending order.
     *
     * @param args the command-line arguments
     */
    public static void main(String[] args) {
        Scanner sc= new Scanner(System.in);
        System.out.print("Enter the number of Integers: ");
        int n= sc.nextInt();
        Integer[] a = new Integer[n];
        for(int i=0;i<n;i++){
            a[i] = sc.nextInt();
        }
        Heap.sort(a);
        show(a);
    }
}

